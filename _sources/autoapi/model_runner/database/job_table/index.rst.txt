model_runner.database.job_table
===============================

.. py:module:: model_runner.database.job_table


Classes
-------

.. autoapisummary::

   model_runner.database.job_table.JobItem
   model_runner.database.job_table.JobTable


Module Contents
---------------

.. py:class:: JobItem

   Bases: :py:obj:`model_runner.database.ddb_helper.DDBItem`


   JobItem is a dataclass meant to represent a single item in the JobStatus table.

   The data schema is defined as follows:
   image_id: str = unique identifier for the image associated with the job
   job_id: Optional[str] = unique identifier for the job
   image_url: Optional[str] = S3 URL or another source location for the image
   image_read_role: Optional[str] = IAM role ARN for accessing the image from its source
   model_invoke_mode: Optional[str] = mode in which the model is invoked (e.g., batch or streaming)
   start_time: Optional[int] = time in epoch milliseconds when the job started
   expire_time: Optional[int] = time in epoch seconds when the job will expire
   end_time: Optional[int] = time in epoch milliseconds when the job ended
   region_success: Optional[int] = current count of regions that have successfully processed for this image
   region_error: Optional[int] = current count of regions that have errored during processing
   region_count: Optional[int] = total count of regions expected for this image
   width: Optional[int] = width of the image in pixels
   height: Optional[int] = height of the image in pixels
   extents: Optional[str] = string representation of the image extents
   tile_size: Optional[str] = size of the tiles used during processing
   tile_overlap: Optional[str] = overlap between tiles during processing
   model_name: Optional[str] = name of the model used for processing
   outputs: Optional[str] = details about the job output
   processing_duration: Optional[int] = time in seconds taken to complete processing
   feature_properties: Optional[str] = additional feature properties or metadata from the image processing
   feature_distillation_option: Optional[str] = the options used in selecting features (e.g., NMS/SOFT_NMS, thresholds)
   roi_wkt: Optional[str] = a Well-Known Text (WKT) representation of the requested processing bounds


   .. py:attribute:: image_id
      :type:  str


   .. py:attribute:: job_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: image_url
      :type:  Optional[str]
      :value: None



   .. py:attribute:: image_read_role
      :type:  Optional[str]
      :value: None



   .. py:attribute:: model_invoke_mode
      :type:  Optional[str]
      :value: None



   .. py:attribute:: start_time
      :type:  Optional[int]
      :value: None



   .. py:attribute:: expire_time
      :type:  Optional[int]
      :value: None



   .. py:attribute:: end_time
      :type:  Optional[int]
      :value: None



   .. py:attribute:: region_success
      :type:  Optional[int]
      :value: None



   .. py:attribute:: region_error
      :type:  Optional[int]
      :value: None



   .. py:attribute:: region_count
      :type:  Optional[int]
      :value: None



   .. py:attribute:: width
      :type:  Optional[int]
      :value: None



   .. py:attribute:: height
      :type:  Optional[int]
      :value: None



   .. py:attribute:: extents
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tile_size
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tile_overlap
      :type:  Optional[str]
      :value: None



   .. py:attribute:: model_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: outputs
      :type:  Optional[str]
      :value: None



   .. py:attribute:: processing_duration
      :type:  Optional[int]
      :value: None



   .. py:attribute:: feature_properties
      :type:  Optional[str]
      :value: None



   .. py:attribute:: feature_distillation_option
      :type:  Optional[str]
      :value: None



   .. py:attribute:: roi_wkt
      :type:  Optional[str]
      :value: None



   .. py:method:: __post_init__()


   .. py:method:: from_image_request(image_request: aws.osml.model_runner.api.ImageRequest) -> JobItem
      :classmethod:


      Create a JobItem from an ImageRequest instance.

      :param image_request: ImageRequest = The image request from which to generate the JobItem.

      :return: JobItem = A new JobItem instance with the relevant fields populated.



.. py:class:: JobTable(table_name: str)

   Bases: :py:obj:`model_runner.database.ddb_helper.DDBHelper`


   JobTable is a class meant to help OSML with accessing and interacting with the image processing jobs we track
   as part of the job status table. It extends the DDBHelper class and provides its own item data class for use when
   working with items from the table. It also  sets the key for which we index on this table in the constructor.

   :param table_name: str = the name of the table to interact with

   :return: None


   .. py:method:: start_image_request(image_request_item: JobItem) -> JobItem

      Start an image processing request for given image_id, this should be the first record for this image in the
      table.

      :param image_request_item: the unique identifier for the image we want to add to ddb

      :return: JobItem = response from ddb



   .. py:method:: complete_region_request(image_id: str, error: bool) -> JobItem

      Update the image job to reflect that a region has succeeded or failed.

      :param image_id: str = the unique identifier for the image we want to update
      :param error: bool = if there was an error processing the region, is true else false

      :return: None



   .. py:method:: is_image_request_complete(image_request_item: JobItem) -> bool
      :staticmethod:


      Read the table for a ddb item and determine if the image_id associated with the job has completed processing all
      regions associated with that image.

      :param image_request_item: JobItem = the unique identifier for the image we want to check if the image is completed

      :return: bool



   .. py:method:: end_image_request(image_id: str) -> JobItem

      Stop an image processing job for given image_id and record the time the job ended, this should be the last
      record for this image in the table.

      :param image_id: str = the unique identifier for the image we want to stop processing

      :return: None



   .. py:method:: get_image_request(image_id: str) -> JobItem

      Get a JobItem object from the table based on the image_id provided

      :param image_id: str = the unique identifier for the image we want to start processing

      :return: JobItem = updated image request item from ddb



   .. py:method:: update_image_request(image_request_item: JobItem) -> JobItem

      Get a JobItem object from the table based on the image_id provided

      :param image_request_item: JobItem =

      :return: ImageRequestItem = updated image request item from ddb



   .. py:method:: get_processing_duration(start_time: int) -> int
      :staticmethod:



