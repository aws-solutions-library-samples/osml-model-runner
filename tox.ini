# Tox (http://tox.testrun.org/) is a tool for running tests in multiple virtualenvs.
# This configuration file will run the test suite on all supported Python versions.
# To use it, "pip install tox" and then run "tox" from this directory.

[tox]
# add, docs, back into this once we have it fixed
envlist = flake8,black-check,isort-check,unit
requires = tox-conda
skip_missing_interpreters = False
isolated_build = true

[testenv]
basepython = python3.10
setenv =
# ModelRunner
    AWS_DEFAULT_REGION=us-west-2
    WORKERS=4
    WORKERS_PER_CPU=1
    JOB_TABLE=TEST-JOB-TABLE
    ENDPOINT_TABLE=TEST-ENDPOINT-STATS-TABLE
    FEATURE_TABLE=TEST-FEATURE-TABLE
    REGION_REQUEST_TABLE=TEST-REGION-REQUEST-TABLE
    IMAGE_QUEUE=TEST-IMAGE-QUEUE
    REGION_QUEUE=TEST-REGION-QUEUE
    IMAGE_STATUS_TOPIC=TEST-IMAGE-STATUS-TOPIC
    SM_SELF_THROTTLING=true
# BOTO/MOTO
    AWS_ACCESS_KEY_ID=testing
    AWS_SECRET_ACCESS_KEY=testing
    AWS_SECURITY_TOKEN=testing
    AWS_SESSION_TOKEN=testing

[testenv:flake8]
deps =
    flake8
    pep8-naming
    flake8-import-order
commands =
    flake8

[testenv:isort-format]
deps = isort==5.12.0
commands =
    isort .

[testenv:isort-check]
deps = isort==5.12.0
commands =
    isort --check-only .

[testenv:black-format]
# Used during development (before committing) to format .py files.
deps = black==23.1.0
commands =
    black ./

[testenv:black-check]
# Used by automated build steps to check that all files are properly formatted.
deps = black==23.1.0
commands =
    black --check ./

[testenv:docs]
changedir = doc
deps =
    sphinx
    sphinx-rtd-theme
conda_deps =
    gdal
    proj
conda_channels =
    conda-forge
commands = sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:unit]
deps =
    pytest==7.2.1
    pytest-cov==4.0.0
    pytest-xdist==3.2.0
    pytest-asyncio==0.20.3
    mock==5.0.1
    numpy==1.23.1
conda_deps =
    gdal
    proj
conda_channels =
    conda-forge
# {posargs} can be passed in by additional arguments specified when invoking tox.
# Can be used to specify which tests to run, e.g.: tox -- -s
commands =
    pytest --cov-config .coveragerc --cov aws.osml --cov-report term-missing {posargs}
    {env:IGNORE_COVERAGE:} coverage report --rcfile .coveragerc
    {env:IGNORE_COVERAGE:} coverage html --rcfile .coveragerc